generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./src/generated/client"
  emitTranspiledCode = "true"
}

generator graphql {
  provider   = "graphql-schema-generator"
  createCRUD = "true"
  output   = "./src/generated/schema"
}

datasource db {
  provider = "sqlite"
  url      = "file:./gtfs/db/ubahnchen.db"
}

model calendar {
  service_id Int    @id @default(autoincrement())
  monday     Int
  tuesday    Int
  wednesday  Int
  thursday   Int
  friday     Int
  saturday   Int
  sunday     Int
  start_date String
  end_date   String
}

model calendar_dates {
  idx         Int    @id @default(autoincrement())
  service_id  Int
  date        String
  is_removing Int
}

model routes {
  route_id   String  @id
  route_name String
  trips      trips[]
}

model stop_times {
  idx            Int   @id @default(autoincrement())
  trip_id        Int
  arrival_time   Int
  departure_time Int
  stop_idx       Int
  stops          stops @relation(fields: [stop_idx], references: [stop_idx], onDelete: NoAction, onUpdate: NoAction)
  trips          trips @relation(fields: [trip_id], references: [trip_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([departure_time], map: "idx_departure_time")
  @@index([arrival_time], map: "idx_arrival_time")
  @@index([trip_id], map: "idx_trip_id")
}

model stops {
  stop_idx   Int          @id @default(autoincrement())
  stop_id    String
  stop_name  String
  stop_times stop_times[]
}

model trips {
  route_id      String
  service_id    Int
  trip_id       Int          @id @default(autoincrement())
  trip_headsign String
  start_time    Int
  end_time      Int
  routes        routes       @relation(fields: [route_id], references: [route_id], onDelete: NoAction, onUpdate: NoAction)
  stop_times    stop_times[]
}
